{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortField","setSortField","reverse","setReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","getPreparedGoods","className","type","cn","onClick","map","goodName","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAKL,IA2BaE,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EA9BiB,SACvBC,EACAL,GAEI,IADJE,IACG,yDACCI,EAAa,YAAOD,GAmBxB,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAAUc,SACb,OAAOF,EAAMG,cAAcF,GAC7B,KAAKb,EAAUgB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,IACFI,EAAgBA,EAAcJ,WAGzBI,EAMcQ,CAAiBjB,EAAiBG,EAAWE,GAElE,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYjB,IAAcJ,EAAUc,WAG1CQ,QAAS,kBAAMjB,EAAaL,EAAUc,WATxC,iCAcA,wBACEM,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYjB,IAAcJ,EAAUgB,SAG1CM,QAAS,kBAAMjB,EAAaL,EAAUgB,SATxC,4BAcA,wBACEI,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAaf,IAGnBgB,QAAS,kBAAMf,GAAYD,IAT7B,sBAcEF,EAAUa,OAAS,GAAKX,IACxB,wBACEc,KAAK,SACLD,UAAWE,IAAG,SAAU,YAAa,YACrCC,QAAS,WACPjB,EAAa,IACbE,GAAW,IALf,sBAaJ,6BACGC,EAAae,KAAI,SAAAC,GAAQ,OACxB,oBAAI,UAAQ,OAAZ,SAAmCA,GAAXA,YClHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bf769c9f.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\nconst getPreparedGoods = (\n  goods: string[],\n  sortField: string,\n  reverse = true,\n) => {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n        case SortField.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, reverse);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SortField.Alphabet },\n            )\n          }\n          onClick={() => setSortField(SortField.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SortField.Length },\n            )\n          }\n          onClick={() => setSortField(SortField.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !reverse },\n            )\n          }\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortField.length > 0 || reverse) && (\n          <button\n            type=\"button\"\n            className={cn('button', 'is-danger', 'is-light')}\n            onClick={() => {\n              setSortField('');\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(goodName => (\n          <li data-cy=\"Good\" key={goodName}>{goodName}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}